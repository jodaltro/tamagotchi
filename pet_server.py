"""
Server stubs for integrating the virtual pet with messaging platforms.

This module demonstrates how you might expose the pet logic via functions that
handle incoming messages and produce responses. In a real production setup,
these functions would be replaced with HTTP handlers that integrate with a
messaging API (e.g., WhatsApp Business Platform). The `PETS` dictionary
simulates a simple in-memory storage for pet instances keyed by user ID.
"""

from typing import Dict

from .virtual_pet import VirtualPet

# In-memory store for pet instances keyed by user ID
PETS: Dict[str, VirtualPet] = {}


def get_pet(user_id: str) -> VirtualPet:
    """Retrieve or create a `VirtualPet` for the given user ID."""
    if user_id not in PETS:
        PETS[user_id] = VirtualPet()
    return PETS[user_id]


def handle_incoming_message(user_id: str, message: str) -> str:
    """
    Process an incoming message for a given user and return the pet's response.

    Args:
        user_id: A unique identifier for the user (e.g., phone number).
        message: The text message received from the user.

    Returns:
        A response string generated by the pet.
    """
    pet = get_pet(user_id)
    pet.user_message(message)
    return pet.pet_response()


# Example (for testing):
# response = handle_incoming_message("user123", "Vamos jogar algo?")
# print(response)
